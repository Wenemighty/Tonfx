# File: tonfx_bot.py
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Replace with your bot token
BOT_TOKEN = '7554460064:AAEAy6Y2SIrKPry26fVyzm3STcfwLEbsHqc'
CHANNEL_USERNAME = '@wenefx'  # Replace with your channel username

# Function to check if a user is in the channel
def is_user_in_channel(user_id: int) -> bool:
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember?chat_id={CHANNEL_USERNAME}&user_id={user_id}"
    response = requests.get(url).json()
    status = response.get("result", {}).get("status", "")
    return status in ["member", "administrator", "creator"]

# Start command handler
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    if not is_user_in_channel(user_id):
        update.message.reply_text(
            f"🚨 You must join our channel {CHANNEL_USERNAME} to use this bot.\n\n"
            "👉 [Click to Join Channel](https://t.me/wenefx)\n\n"
            "After joining, type /start again.",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return

    # Welcome message and menu
    keyboard = [
        ["💵 Withdraw", "🎁 Daily Bonus"],
        ["Earn More", "💰 Balance", "🔗 Referral"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "🎉 Welcome to TonFX Bot!\n\n"
        "📌 Use the menu below to navigate.",
        reply_markup=reply_markup
    )

# Menu handlers
def withdraw(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("💵 Withdraw: Feature coming soon!")

def daily_bonus(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("🎁 Daily Bonus: Claim your bonus here!")

def earn_more(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("📈 Earn More: Learn how to earn more with TonFX.")

def balance(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("💰 Balance: Check your balance here!")

def referral(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    update.message.reply_text(f"🔗 Referral Link: Share this link to earn rewards!\n\n{referral_link}")

# Main function to run the bot
def main():
    updater = Updater(BOT_TOKEN)

    # Dispatcher to handle commands and messages
    dispatcher = updater.dispatcher

    # Commands
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.regex("💵 Withdraw"), withdraw))
    dispatcher.add_handler(MessageHandler(Filters.regex("🎁 Daily Bonus"), daily_bonus))
    dispatcher.add_handler(MessageHandler(Filters.regex("Earn More"), earn_more))
    dispatcher.add_handler(MessageHandler(Filters.regex("💰 Balance"), balance))
    dispatcher.add_handler(MessageHandler(Filters.regex("🔗 Referral"), referral))

    # Start polling for updates
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
